
module.exports=function(config,membersMap,modulesMap){
	var preset=new Set(config.preset);
	if(preset.size==0){
		preset.add("ESNext");
	}
	if(preset.has("ESNext")){
		preset.add("ES2020");
		preset.add("ESNext.Array");
		preset.add("ESNext.Intl");
		preset.add("ESNext.Symbol");
		preset.add("ESNext.Promise");
	}
	if(preset.has("ES2020")){
		preset.add("ES2019");
		preset.add("ES2020.String");
		preset.add("ES2020.Symbol.WellKnown");
	}
	if(preset.has("ES2019")){
		preset.add("ES2018");
		preset.add("ES2019.Array");
		preset.add("ES2019.Object");
		preset.add("ES2019.String");
		preset.add("ES2019.Symbol");
	}
	if(preset.has("ES2018")){
		preset.add("ES2017");
		//preset.add("ES2018.Intl");
		preset.add("ES2018.Promise");
		//preset.add("ES2018.RegExp");
	}
	if(preset.has("ES2017")){
		preset.add("ES2016");
		preset.add("ES2017.Object");
		//preset.add("ES2017.Intl");
		//preset.add("ES2017.SharedMemory");
		preset.add("ES2017.String");
		preset.add("ES2017.TypedArrays");
	}
	if(preset.has("ES2016")){
		preset.add("ES2015");
		preset.add("ES2016.Array.Include");
	}
	if(preset.has("ES2015")){
		preset.add("ES2015.Core");
		preset.add("ES2015.Collection");
		//preset.add("ES2015.Generator");
		preset.add("ES2015.Iterable");
		preset.add("ES2015.Promise");
		//preset.add("ES2015.Proxy");
		preset.add("ES2015.Reflect");
		preset.add("ES2015.Symbol");
		preset.add("ES2015.Symbol.WellKnown");
	}
	if(preset.has("ES6")){
		preset.add("DOM");
		preset.add("DOM.Iterable");
	}
	if(config.version==3){
		modulesMap.set("globalThis","core-js/modules/es.global-this");
		var forEach=[];
		var includes=[];
		var iterator=[];
		if(preset.has("ES5")){
			modulesMap.set("Array.isArray","core-js/modules/es.array.is-array");
			modulesMap.set("Date.now","core/modules/es.date.now");
			modulesMap.set("JSON","core-js/modules/es.json.stringify");
			modulesMap.set("Object.create","core-js/modules/es.object.create");
			modulesMap.set("Object.defineProperties","core-js/modules/es.object.define-properties");
			modulesMap.set("Object.defineProperty","core-js/modules/es.object.define-property");
			modulesMap.set("Object.freeze","core-js/modules/es.object.freeze");
			modulesMap.set("Object.getOwnPropertyDescriptor","core-js/modules/es.object.get-own-property-descriptor");
			modulesMap.set("Object.getOwnPropertyNames","core-js/modules/es.object.get-own-property-names");
			modulesMap.set("Object.getPrototypeOf","core-js/modules/es.object.get-prototype-of");
			modulesMap.set("Object.isExtensible","core-js/modules/es.object.is-extensible");
			modulesMap.set("Object.isFrozen","core-js/modules/es.object.is-frozen");
			modulesMap.set("Object.isSealed","core-js/modules/es.object.is-sealed");
			modulesMap.set("Object.keys","core-js/modules/es.object.keys");
			modulesMap.set("Object.preventExtensions","core-js/modules/es.object.prevent-extensions");
			modulesMap.set("Object.seal","core-js/modules/es.object.seal");
			modulesMap.set("Object.setPrototypeOf","core-js/modules/es.object.set-prototype-of");
			modulesMap.set("parseFloat","core-js/modules/es.parse-float");
			modulesMap.set("parseInt","core-js/modules/es.parse-int");
			modulesMap.set("RegExp","core-js/modules/es.regexp.constructor");
			
			membersMap.set(".concat","core-js/modules/es.array.concat");
			membersMap.set(".every","core-js/modules/es.array.every");
			membersMap.set(".fill","core-js/modules/es.array.fill");
			membersMap.set(".filter","core-js/modules/es.array.filter");
			membersMap.set(".forEach","core-js/modules/es.array.for-each");
			membersMap.set(".indexOf","core-js/modules/es.array.index-of");
			membersMap.set(".join","core-js/modules/es.array.join");
			membersMap.set(".lastIndexOf","core-js/modules/es.array.last-index-of");
			membersMap.set(".map","core-js/modules/es.array.map");
			membersMap.set(".reduce","core-js/modules/es.array.reduce");
			membersMap.set(".reduceRight","core-js/modules/es.array.reduce-right");
			membersMap.set(".reverse","core-js/modules/es.array.reverse");
			membersMap.set(".slice","core-js/modules/es.array.slice");
			membersMap.set(".some","core-js/modules/es.array.some");
			membersMap.set(".sort","core-js/modules/es.array.sort");
			membersMap.set(".splice","core-js/modules/es.array.splice");
			
			membersMap.set(".toISOString","core/modules/es.date.to-iso-string");
			membersMap.set(".toJSON","core/modules/es.date.to-json");
			membersMap.set(".toString",["core/modules/es.date.to-string","core/modules/es.object.to-string","core-js/modules/es.regexp.to-string"]);

			membersMap.set(".bind","core/modules/es.function.bind");
			
			membersMap.set(".toFixed","core-js/modules/es.number.to-fixed");
			membersMap.set(".toPrecision","core-js/modules/es.number.to-precision");
			
			membersMap.set(".exec","core-js/modules/es.regexp.exec");
			membersMap.set(".test","core-js/modules/es.regexp.test");
			
			membersMap.set(".includes",includes);
			includes.push("core-js/modules/es.string.includes");
			membersMap.set(".match","core-js/modules/es.string.match");
			membersMap.set(".replace","core-js/modules/es.string.replace");
			membersMap.set(".search","core-js/modules/es.string.search");
			membersMap.set(".split","core-js/modules/es.string.split");
		}
		if(preset.has("ES2015.Core")){
			modulesMap.set("Array.from","core-js/modules/es.array.from");
			modulesMap.set("Array.of","core-js/modules/es.array.of");

			membersMap.set(".fill","core-js/modules/es.array.fill");
			membersMap.set(".find","core-js/modules/es.array.find");
			membersMap.set(".findIndex","core-js/modules/es.array.find-index");
			
			membersMap.set(".name","core/modules/es.function.name");
			
			modulesMap.set("Math.acosh","core-js/modules/es.math.acosh");
			modulesMap.set("Math.asinh","core-js/modules/es.math.asinh");
			modulesMap.set("Math.atanh","core-js/modules/es.math.atanh");
			modulesMap.set("Math.cbrt","core-js/modules/es.math.cbrt");
			modulesMap.set("Math.clz32","core-js/modules/es.math.clz32");
			modulesMap.set("Math.cosh","core-js/modules/es.math.cosh");
			modulesMap.set("Math.expm1","core-js/modules/es.math.expm1");
			modulesMap.set("Math.fround","core-js/modules/es.math.fround");
			modulesMap.set("Math.hypot","core-js/modules/es.math.hypot");
			modulesMap.set("Math.imul","core-js/modules/es.math.imul");
			modulesMap.set("Math.log1p","core-js/modules/es.math.log1p");
			modulesMap.set("Math.log2","core-js/modules/es.math.log2");
			modulesMap.set("Math.log10","core-js/modules/es.math.log10");
			modulesMap.set("Math.sign","core-js/modules/es.math.sign");
			modulesMap.set("Math.sinh","core-js/modules/es.math.sinh");
			modulesMap.set("Math.tanh","core-js/modules/es.math.tanh");
			modulesMap.set("Math.trunc","core-js/modules/es.math.trunc");
			
			modulesMap.set("Number","core-js/modules/es.number.constructor");
			modulesMap.set("Number.EPSILON","core-js/modules/es.number.epsilon");
			modulesMap.set("Number.isFinite","core-js/modules/es.number.is-finite");
			modulesMap.set("Number.isInteger","core-js/modules/es.number.is-integer");
			modulesMap.set("Number.isNaN","core-js/modules/es.number.is-nan");
			modulesMap.set("Number.isSafeInteger","core-js/modules/es.number.is-safe-integer");
			modulesMap.set("Number.MAX_SAFE_INTEGER","core-js/modules/es.number.max-safe-integer");
			modulesMap.set("Number.MIN_SAFE_INTEGER","core-js/modules/es.number.min-safe-integer");
			modulesMap.set("Number.parseFloat","core-js/modules/es.number.parse-float");
			modulesMap.set("Number.parseInt","core-js/modules/es.number.parse-int");
			
			modulesMap.set("Object.assign","core-js/modules/es.object.assign");
			modulesMap.set("Object.is","core-js/modules/es.object.is");
			
			membersMap.set(".flags","core-js/modules/es.regexp.flags");
			membersMap.set(".sticky","core-js/modules/es.regexp.sticky");
			
			membersMap.set(".codePointAt","core-js/modules/es.string.code-point-at");
			membersMap.set(".endsWith","core-js/modules/es.string.ends-with");
			membersMap.set(".startsWith","core-js/modules/es.string.starts-with");
			membersMap.set(".repeat","core-js/modules/es.string.repeat");
			membersMap.set(".anchor","core-js/modules/es.string.anchor");
			membersMap.set(".big","core-js/modules/es.string.big");
			membersMap.set(".blink","core-js/modules/es.string.blink");
			membersMap.set(".bold","core-js/modules/es.string.bold");
			membersMap.set(".fixed","core-js/modules/es.string.fixed");
			membersMap.set(".fontcolor","core-js/modules/es.string.fontcolor");
			membersMap.set(".fontsize","core-js/modules/es.string.fontsize");
			membersMap.set(".fromCodePoint","core-js/modules/es.string.from-code-point");
			membersMap.set(".italics","core-js/modules/es.string.italics");
			membersMap.set(".link","core-js/modules/es.string.link");
			membersMap.set(".small","core-js/modules/es.string.small");
			membersMap.set(".strike","core-js/modules/es.string.strike");
			membersMap.set(".sub","core-js/modules/es.string.sub");
			membersMap.set(".sup","core-js/modules/es.string.sup");
			modulesMap.set("String.fromCodePoint","core-js/modules/es.string.from-code-point");
			modulesMap.set("String.raw","core-js/modules/es.string.raw");
		}
		if(preset.has("ES2015.Collection")){
			modulesMap.set("Map","core-js/modules/es.map");
			modulesMap.set("Set","core-js/modules/es.set");
			modulesMap.set("WeakMap","core-js/modules/es.weak-map");
			modulesMap.set("WeakSet","core-js/modules/es.weak-set");
		}
		if(preset.has("ES2015.Iterable")){
			iterator=["core-js/modules/es.symbol","core-js/modules/es.symbol.iterator","core-js/modules/es.array.iterator","core-js/modules/es.string.iterator"];
			modulesMap.set("Symbol.iterator",iterator);
		}
		if(preset.has("ES2015.Promise")){
			modulesMap.set("Promise","core-js/modules/es.promise");
		}
		if(preset.has("ES2015.Reflect")){
			modulesMap.set("Reflect.apply","core-js/modules/es.reflect.apply");
			modulesMap.set("Reflect.construct","core-js/modules/es.reflect.construct");
			modulesMap.set("Reflect.defineProperty","core-js/modules/es.reflect.define-property");
			modulesMap.set("Reflect.deleteProperty","core-js/modules/es.reflect.delete-property");
			modulesMap.set("Reflect.get","core-js/modules/es.reflect.get");
			modulesMap.set("Reflect.getOwnPropertyDescriptor","core-js/modules/es.reflect.get-own-property-descriptor");
			modulesMap.set("Reflect.getPrototypeOf","core-js/modules/es.reflect.get-prototype-of");
			modulesMap.set("Reflect.has","core-js/modules/es.reflect.has");
			modulesMap.set("Reflect.isExtensible","core-js/modules/es.reflect.is-extensible");
			modulesMap.set("Reflect.ownKeys","core-js/modules/es.reflect.own-keys");
			modulesMap.set("Reflect.preventExtensions","core-js/modules/es.reflect.prevent-extensions");
			modulesMap.set("Reflect.set","core-js/modules/es.reflect.set");
			modulesMap.set("Reflect.setPrototypeOf","core-js/modules/es.reflect.set-prototype-of");
		}
		if(preset.has("ES2015.Symbol")){
			modulesMap.set("Symbol","core-js/modules/es.symbol");
		}
		if(preset.has("ES2015.Symbol.WellKnown")){
			modulesMap.set("JSON",["core-js/modules/es.json.stringify","core-js/modules/es.json.to-string-tag"]);
			modulesMap.set("Math","core-js/modules/es.math.to-string-tag");
			modulesMap.set("Reflect","core-js/modules/es.reflect.to-string-tag");
			modulesMap.set("Symbol.hasInstance",["core-js/modules/es.symbol.has-instance","core/modules/es.function.has-instance"]);
			modulesMap.set("Symbol.isConcatSpreadable","core-js/modules/es.symbol.is-concat-spreadable");
			modulesMap.set("Symbol.match","core-js/modules/es.symbol.match");
			modulesMap.set("Symbol.replace","core-js/modules/es.symbol.replace");
			modulesMap.set("Symbol.search","core-js/modules/es.symbol.search");
			modulesMap.set("Symbol.species",["core-js/modules/es.symbol.species","core-js/modules/es.array.species"]);
			modulesMap.set("Symbol.split","core-js/modules/es.symbol.split");
			modulesMap.set("Symbol.toPrimitive",["core-js/modules/es.symbol.to-primitive","core/modules/es.date.to-primitive"]);
			modulesMap.set("Symbol.toStringTag","core-js/modules/es.symbol.to-string-tag");
			modulesMap.set("Symbol.unscopables","core-js/modules/es.symbol.unscopables");
		}
		if(preset.has("ES2016.Array.Include")){
			membersMap.set(".includes",includes);
			includes.push("core-js/modules/es.array.includes");
		}
		if(preset.has("ES2017.Object")){
			modulesMap.set("Object.entries","core-js/modules/es.object.entries");
			modulesMap.set("Object.getOwnPropertyDescriptors","core-js/modules/es.object.get-own-property-descriptors");
			modulesMap.set("Object.values","core-js/modules/es.object.values");
		}
		if(preset.has("ES2017.String")){
			membersMap.set(".padEnd","core-js/modules/es.string.pad-end");
			membersMap.set(".padStart","core-js/modules/es.string.pad-start");
		}
		if(preset.has("ES2017.TypedArrays")){
			modulesMap.set("DataView","core-js/modules/es.data-view");
			modulesMap.set("Float32Array","core-js/modules/es.typed-array.float32-array");
			modulesMap.set("Float64Array","core-js/modules/es.typed-array.float64-array");
			modulesMap.set("Int8Array","core-js/modules/es.typed-array.int8-array");
			modulesMap.set("Int16Array","core-js/modules/es.typed-array.int16-array");
			modulesMap.set("Int32Array","core-js/modules/es.typed-array.int32-array");
			modulesMap.set("Uint8Array","core-js/modules/es.typed-array.uint8-array");
			modulesMap.set("Uint8ClampedArray","core-js/modules/es.typed-array.uint8-clamped-array");
			modulesMap.set("Uint16Array","core-js/modules/es.typed-array.uint16-array");
			modulesMap.set("Uint32Array","core-js/modules/es.typed-array.uint32-array");
			modulesMap.set("Float32Array.from","core-js/modules/es.typed-array.from");
			modulesMap.set("Float64Array.from","core-js/modules/es.typed-array.from");
			modulesMap.set("Int8Array.from","core-js/modules/es.typed-array.from");
			modulesMap.set("Int16Array.from","core-js/modules/es.typed-array.from");
			modulesMap.set("Int32Array.from","core-js/modules/es.typed-array.from");
			modulesMap.set("Uint8Array.from","core-js/modules/es.typed-array.from");
			modulesMap.set("Uint8ClampedArray.from","core-js/modules/es.typed-array.from");
			modulesMap.set("Uint16Array.from","core-js/modules/es.typed-array.from");
			modulesMap.set("Uint32Array.from","core-js/modules/es.typed-array.from");
			modulesMap.set("Float32Array.of","core-js/modules/es.typed-array.of");
			modulesMap.set("Float64Array.of","core-js/modules/es.typed-array.of");
			modulesMap.set("Int8Array.of","core-js/modules/es.typed-array.of");
			modulesMap.set("Int16Array.of","core-js/modules/es.typed-array.of");
			modulesMap.set("Int32Array.of","core-js/modules/es.typed-array.of");
			modulesMap.set("Uint8Array.of","core-js/modules/es.typed-array.of");
			modulesMap.set("Uint8ClampedArray.of","core-js/modules/es.typed-array.of");
			modulesMap.set("Uint16Array.of","core-js/modules/es.typed-array.of");
			modulesMap.set("Uint32Array.of","core-js/modules/es.typed-array.of");
			
			membersMap.set(".copyWithin",["core-js/modules/es.array.copy-within","core-js/modules/es.typed-array.copy-within"]);
			membersMap.set(".every",["core-js/modules/es.array.every","core-js/modules/es.typed-array.every"]);
			membersMap.set(".fill",["core-js/modules/es.array.fill","core-js/modules/es.typed-array.fill"]);
			membersMap.set(".filter",["core-js/modules/es.array.filter","core-js/modules/es.typed-array.filter"]);
			membersMap.set(".find",["core-js/modules/es.array.find","core-js/modules/es.typed-array.find"]);
			membersMap.set(".findIndex",["core-js/modules/es.array.find-index","core-js/modules/es.typed-array.find-index"]);
			forEach.push("core-js/modules/es.array.for-each","core-js/modules/es.typed-array.for-each");
			membersMap.set(".forEach",forEach);
			membersMap.set(".includes",includes);
			includes.push("core-js/modules/es.typed-array.includes");
			membersMap.set(".indexOf",["core-js/modules/es.array.index-of","core-js/modules/es.typed-array.index-of"]);
			membersMap.set(".join",["core-js/modules/es.array.join","core-js/modules/es.typed-array.join"]);
			membersMap.set(".lastIndexOf",["core-js/modules/es.array.last-index-of","core-js/modules/es.typed-array.last-index-of"]);
			membersMap.set(".map",["core-js/modules/es.array.map","core-js/modules/es.typed-array.map"]);
			membersMap.set(".reduce",["core-js/modules/es.array.reduce","core-js/modules/es.typed-array.reduce"]);
			membersMap.set(".reduceRight",["core-js/modules/es.array.reduce-right","core-js/modules/es.typed-array.reduce-right"]);
			membersMap.set(".reverse",["core-js/modules/es.array.reverse","core-js/modules/es.typed-array.reverse"]);
			membersMap.set(".set","core-js/modules/es.typed-array.set");
			membersMap.set(".slice",["core-js/modules/es.array.slice","core-js/modules/es.array-buffer.slice"]);
			membersMap.set(".some",["core-js/modules/es.array.some","core-js/modules/es.typed-array.some"]);
			membersMap.set(".sort",["core-js/modules/es.array.sort","core-js/modules/es.typed-array.sort"]);
			membersMap.set(".subarray","core-js/modules/es.typed-array.subarray");
			membersMap.set(".toLocaleString","core-js/modules/es.typed-array.to-locale-string");
		}
		if(preset.has("ES2018.Promise")){
			modulesMap.set("Promise.finally","core-js/modules/es.promise.finally");
		}
		if(preset.has("ES2019.Symbol")){
			membersMap.set(".description","core-js/modules/es.symbol.description");
		}
		if(preset.has("ES2019.String")){
			membersMap.set(".trimEnd","core-js/modules/es.string.trim-end");
			membersMap.set(".trimStart","core-js/modules/es.string.trim-start");
		}
		if(preset.has("ES2019.Object")){
			modulesMap.set("Object.fromEntries","core-js/modules/es.object.from-entries");
		}
		if(preset.has("ES2019.Array")){
			membersMap.set(".flat","core-js/modules/es.array.flat");
			membersMap.set(".flatMap","core-js/modules/es.array.flat-map");
		}
		if(preset.has("ES2020.String")){
			membersMap.set(".matchAll","core-js/modules/es.string.match-all");
		}
		if(preset.has("ES2020.Symbol.WellKnown")){
			modulesMap.set("Symbol.matchAll","core-js/modules/es.symbol.match-all");
		}
		if(preset.has("ESNext.Promise")){
			modulesMap.set("Promise.allSettled","core-js/modules/es.promise.all-settled");
			modulesMap.set("Promise.any","core-js/modules/es.promise.any");
		}
		if(preset.has("ESNext.AsyncIterable")){
			modulesMap.set("Symbol.asyncIterator","core-js/modules/es.symbol.async-iterator");
		}
		if(preset.has("ESNext")){
			modulesMap.set("AggregateError","core-js/modules/es.aggregate-error");
		}
		if(preset.has("DOM")){
			modulesMap.set("setImmediate","core-js/modules/web.immediate");
			modulesMap.set("queueMicrotask","core-js/modules/web.queue-microtask");
			modulesMap.set("setTimeout","core-js/modules/web.timers");
			modulesMap.set("setInterval","core-js/modules/web.timers");
			modulesMap.set("URLSearchParams","core-js/modules/web.url-search-params");
			modulesMap.set("URL",["core-js/modules/web.url","core-js/modules/web.url.to-json"]);
		}
		if(preset.has("DOM.Iterable")){
			membersMap.set(".forEach",forEach);
			forEach.push("core-js/modules/web.dom-collections.for-each");
			iterator.push("core-js/modules/web.dom-collections.iterator");
		}

		modulesMap.set("ArrayBuffer",[
			"core-js/modules/es.array-buffer.constructor",
			"core-js/modules/es.array-buffer.is-view",
			"core-js/modules/es.array-buffer.slice"
		]);
		membersMap.set(".__defineGetter__","core-js/modules/es.object.define-getter");
		membersMap.set(".__defineSetter__","core-js/modules/es.object.define-setter");
		membersMap.set(".__lookupGetter__","core-js/modules/es.object.lookup-getter");
		membersMap.set(".__lookupSetter__","core-js/modules/es.object.lookup-setter");

	}
}